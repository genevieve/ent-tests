// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"github.com/genevieve/ent-tests/ent/friendrequest"
	"github.com/genevieve/ent-tests/ent/predicate"
	"github.com/genevieve/ent-tests/ent/user"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeFriendRequest = "FriendRequest"
	TypeUser          = "User"
)

// FriendRequestMutation represents an operation that mutates the FriendRequest nodes in the graph.
type FriendRequestMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	status             *friendrequest.Status
	clearedFields      map[string]struct{}
	source             *int
	clearedsource      bool
	destination        *int
	cleareddestination bool
	done               bool
	oldValue           func(context.Context) (*FriendRequest, error)
	predicates         []predicate.FriendRequest
}

var _ ent.Mutation = (*FriendRequestMutation)(nil)

// friendrequestOption allows management of the mutation configuration using functional options.
type friendrequestOption func(*FriendRequestMutation)

// newFriendRequestMutation creates new mutation for the FriendRequest entity.
func newFriendRequestMutation(c config, op Op, opts ...friendrequestOption) *FriendRequestMutation {
	m := &FriendRequestMutation{
		config:        c,
		op:            op,
		typ:           TypeFriendRequest,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFriendRequestID sets the ID field of the mutation.
func withFriendRequestID(id int) friendrequestOption {
	return func(m *FriendRequestMutation) {
		var (
			err   error
			once  sync.Once
			value *FriendRequest
		)
		m.oldValue = func(ctx context.Context) (*FriendRequest, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().FriendRequest.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFriendRequest sets the old FriendRequest of the mutation.
func withFriendRequest(node *FriendRequest) friendrequestOption {
	return func(m *FriendRequestMutation) {
		m.oldValue = func(context.Context) (*FriendRequest, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FriendRequestMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FriendRequestMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *FriendRequestMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *FriendRequestMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().FriendRequest.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetSourceID sets the "source_id" field.
func (m *FriendRequestMutation) SetSourceID(i int) {
	m.source = &i
}

// SourceID returns the value of the "source_id" field in the mutation.
func (m *FriendRequestMutation) SourceID() (r int, exists bool) {
	v := m.source
	if v == nil {
		return
	}
	return *v, true
}

// OldSourceID returns the old "source_id" field's value of the FriendRequest entity.
// If the FriendRequest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FriendRequestMutation) OldSourceID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSourceID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSourceID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSourceID: %w", err)
	}
	return oldValue.SourceID, nil
}

// ResetSourceID resets all changes to the "source_id" field.
func (m *FriendRequestMutation) ResetSourceID() {
	m.source = nil
}

// SetDestinationID sets the "destination_id" field.
func (m *FriendRequestMutation) SetDestinationID(i int) {
	m.destination = &i
}

// DestinationID returns the value of the "destination_id" field in the mutation.
func (m *FriendRequestMutation) DestinationID() (r int, exists bool) {
	v := m.destination
	if v == nil {
		return
	}
	return *v, true
}

// OldDestinationID returns the old "destination_id" field's value of the FriendRequest entity.
// If the FriendRequest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FriendRequestMutation) OldDestinationID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDestinationID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDestinationID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDestinationID: %w", err)
	}
	return oldValue.DestinationID, nil
}

// ResetDestinationID resets all changes to the "destination_id" field.
func (m *FriendRequestMutation) ResetDestinationID() {
	m.destination = nil
}

// SetStatus sets the "status" field.
func (m *FriendRequestMutation) SetStatus(f friendrequest.Status) {
	m.status = &f
}

// Status returns the value of the "status" field in the mutation.
func (m *FriendRequestMutation) Status() (r friendrequest.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the FriendRequest entity.
// If the FriendRequest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FriendRequestMutation) OldStatus(ctx context.Context) (v friendrequest.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *FriendRequestMutation) ResetStatus() {
	m.status = nil
}

// ClearSource clears the "source" edge to the User entity.
func (m *FriendRequestMutation) ClearSource() {
	m.clearedsource = true
}

// SourceCleared reports if the "source" edge to the User entity was cleared.
func (m *FriendRequestMutation) SourceCleared() bool {
	return m.clearedsource
}

// SourceIDs returns the "source" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SourceID instead. It exists only for internal usage by the builders.
func (m *FriendRequestMutation) SourceIDs() (ids []int) {
	if id := m.source; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSource resets all changes to the "source" edge.
func (m *FriendRequestMutation) ResetSource() {
	m.source = nil
	m.clearedsource = false
}

// ClearDestination clears the "destination" edge to the User entity.
func (m *FriendRequestMutation) ClearDestination() {
	m.cleareddestination = true
}

// DestinationCleared reports if the "destination" edge to the User entity was cleared.
func (m *FriendRequestMutation) DestinationCleared() bool {
	return m.cleareddestination
}

// DestinationIDs returns the "destination" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// DestinationID instead. It exists only for internal usage by the builders.
func (m *FriendRequestMutation) DestinationIDs() (ids []int) {
	if id := m.destination; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetDestination resets all changes to the "destination" edge.
func (m *FriendRequestMutation) ResetDestination() {
	m.destination = nil
	m.cleareddestination = false
}

// Where appends a list predicates to the FriendRequestMutation builder.
func (m *FriendRequestMutation) Where(ps ...predicate.FriendRequest) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *FriendRequestMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (FriendRequest).
func (m *FriendRequestMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FriendRequestMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.source != nil {
		fields = append(fields, friendrequest.FieldSourceID)
	}
	if m.destination != nil {
		fields = append(fields, friendrequest.FieldDestinationID)
	}
	if m.status != nil {
		fields = append(fields, friendrequest.FieldStatus)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FriendRequestMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case friendrequest.FieldSourceID:
		return m.SourceID()
	case friendrequest.FieldDestinationID:
		return m.DestinationID()
	case friendrequest.FieldStatus:
		return m.Status()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FriendRequestMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case friendrequest.FieldSourceID:
		return m.OldSourceID(ctx)
	case friendrequest.FieldDestinationID:
		return m.OldDestinationID(ctx)
	case friendrequest.FieldStatus:
		return m.OldStatus(ctx)
	}
	return nil, fmt.Errorf("unknown FriendRequest field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FriendRequestMutation) SetField(name string, value ent.Value) error {
	switch name {
	case friendrequest.FieldSourceID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSourceID(v)
		return nil
	case friendrequest.FieldDestinationID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDestinationID(v)
		return nil
	case friendrequest.FieldStatus:
		v, ok := value.(friendrequest.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	}
	return fmt.Errorf("unknown FriendRequest field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FriendRequestMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FriendRequestMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FriendRequestMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown FriendRequest numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FriendRequestMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FriendRequestMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FriendRequestMutation) ClearField(name string) error {
	return fmt.Errorf("unknown FriendRequest nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FriendRequestMutation) ResetField(name string) error {
	switch name {
	case friendrequest.FieldSourceID:
		m.ResetSourceID()
		return nil
	case friendrequest.FieldDestinationID:
		m.ResetDestinationID()
		return nil
	case friendrequest.FieldStatus:
		m.ResetStatus()
		return nil
	}
	return fmt.Errorf("unknown FriendRequest field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FriendRequestMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.source != nil {
		edges = append(edges, friendrequest.EdgeSource)
	}
	if m.destination != nil {
		edges = append(edges, friendrequest.EdgeDestination)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FriendRequestMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case friendrequest.EdgeSource:
		if id := m.source; id != nil {
			return []ent.Value{*id}
		}
	case friendrequest.EdgeDestination:
		if id := m.destination; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FriendRequestMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FriendRequestMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FriendRequestMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedsource {
		edges = append(edges, friendrequest.EdgeSource)
	}
	if m.cleareddestination {
		edges = append(edges, friendrequest.EdgeDestination)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FriendRequestMutation) EdgeCleared(name string) bool {
	switch name {
	case friendrequest.EdgeSource:
		return m.clearedsource
	case friendrequest.EdgeDestination:
		return m.cleareddestination
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FriendRequestMutation) ClearEdge(name string) error {
	switch name {
	case friendrequest.EdgeSource:
		m.ClearSource()
		return nil
	case friendrequest.EdgeDestination:
		m.ClearDestination()
		return nil
	}
	return fmt.Errorf("unknown FriendRequest unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FriendRequestMutation) ResetEdge(name string) error {
	switch name {
	case friendrequest.EdgeSource:
		m.ResetSource()
		return nil
	case friendrequest.EdgeDestination:
		m.ResetDestination()
		return nil
	}
	return fmt.Errorf("unknown FriendRequest edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                              Op
	typ                             string
	id                              *int
	name                            *string
	clearedFields                   map[string]struct{}
	friends                         map[int]struct{}
	removedfriends                  map[int]struct{}
	clearedfriends                  bool
	outgoing_friend_requests        map[int]struct{}
	removedoutgoing_friend_requests map[int]struct{}
	clearedoutgoing_friend_requests bool
	incoming_friend_requests        map[int]struct{}
	removedincoming_friend_requests map[int]struct{}
	clearedincoming_friend_requests bool
	done                            bool
	oldValue                        func(context.Context) (*User, error)
	predicates                      []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
}

// AddFriendIDs adds the "friends" edge to the User entity by ids.
func (m *UserMutation) AddFriendIDs(ids ...int) {
	if m.friends == nil {
		m.friends = make(map[int]struct{})
	}
	for i := range ids {
		m.friends[ids[i]] = struct{}{}
	}
}

// ClearFriends clears the "friends" edge to the User entity.
func (m *UserMutation) ClearFriends() {
	m.clearedfriends = true
}

// FriendsCleared reports if the "friends" edge to the User entity was cleared.
func (m *UserMutation) FriendsCleared() bool {
	return m.clearedfriends
}

// RemoveFriendIDs removes the "friends" edge to the User entity by IDs.
func (m *UserMutation) RemoveFriendIDs(ids ...int) {
	if m.removedfriends == nil {
		m.removedfriends = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.friends, ids[i])
		m.removedfriends[ids[i]] = struct{}{}
	}
}

// RemovedFriends returns the removed IDs of the "friends" edge to the User entity.
func (m *UserMutation) RemovedFriendsIDs() (ids []int) {
	for id := range m.removedfriends {
		ids = append(ids, id)
	}
	return
}

// FriendsIDs returns the "friends" edge IDs in the mutation.
func (m *UserMutation) FriendsIDs() (ids []int) {
	for id := range m.friends {
		ids = append(ids, id)
	}
	return
}

// ResetFriends resets all changes to the "friends" edge.
func (m *UserMutation) ResetFriends() {
	m.friends = nil
	m.clearedfriends = false
	m.removedfriends = nil
}

// AddOutgoingFriendRequestIDs adds the "outgoing_friend_requests" edge to the FriendRequest entity by ids.
func (m *UserMutation) AddOutgoingFriendRequestIDs(ids ...int) {
	if m.outgoing_friend_requests == nil {
		m.outgoing_friend_requests = make(map[int]struct{})
	}
	for i := range ids {
		m.outgoing_friend_requests[ids[i]] = struct{}{}
	}
}

// ClearOutgoingFriendRequests clears the "outgoing_friend_requests" edge to the FriendRequest entity.
func (m *UserMutation) ClearOutgoingFriendRequests() {
	m.clearedoutgoing_friend_requests = true
}

// OutgoingFriendRequestsCleared reports if the "outgoing_friend_requests" edge to the FriendRequest entity was cleared.
func (m *UserMutation) OutgoingFriendRequestsCleared() bool {
	return m.clearedoutgoing_friend_requests
}

// RemoveOutgoingFriendRequestIDs removes the "outgoing_friend_requests" edge to the FriendRequest entity by IDs.
func (m *UserMutation) RemoveOutgoingFriendRequestIDs(ids ...int) {
	if m.removedoutgoing_friend_requests == nil {
		m.removedoutgoing_friend_requests = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.outgoing_friend_requests, ids[i])
		m.removedoutgoing_friend_requests[ids[i]] = struct{}{}
	}
}

// RemovedOutgoingFriendRequests returns the removed IDs of the "outgoing_friend_requests" edge to the FriendRequest entity.
func (m *UserMutation) RemovedOutgoingFriendRequestsIDs() (ids []int) {
	for id := range m.removedoutgoing_friend_requests {
		ids = append(ids, id)
	}
	return
}

// OutgoingFriendRequestsIDs returns the "outgoing_friend_requests" edge IDs in the mutation.
func (m *UserMutation) OutgoingFriendRequestsIDs() (ids []int) {
	for id := range m.outgoing_friend_requests {
		ids = append(ids, id)
	}
	return
}

// ResetOutgoingFriendRequests resets all changes to the "outgoing_friend_requests" edge.
func (m *UserMutation) ResetOutgoingFriendRequests() {
	m.outgoing_friend_requests = nil
	m.clearedoutgoing_friend_requests = false
	m.removedoutgoing_friend_requests = nil
}

// AddIncomingFriendRequestIDs adds the "incoming_friend_requests" edge to the FriendRequest entity by ids.
func (m *UserMutation) AddIncomingFriendRequestIDs(ids ...int) {
	if m.incoming_friend_requests == nil {
		m.incoming_friend_requests = make(map[int]struct{})
	}
	for i := range ids {
		m.incoming_friend_requests[ids[i]] = struct{}{}
	}
}

// ClearIncomingFriendRequests clears the "incoming_friend_requests" edge to the FriendRequest entity.
func (m *UserMutation) ClearIncomingFriendRequests() {
	m.clearedincoming_friend_requests = true
}

// IncomingFriendRequestsCleared reports if the "incoming_friend_requests" edge to the FriendRequest entity was cleared.
func (m *UserMutation) IncomingFriendRequestsCleared() bool {
	return m.clearedincoming_friend_requests
}

// RemoveIncomingFriendRequestIDs removes the "incoming_friend_requests" edge to the FriendRequest entity by IDs.
func (m *UserMutation) RemoveIncomingFriendRequestIDs(ids ...int) {
	if m.removedincoming_friend_requests == nil {
		m.removedincoming_friend_requests = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.incoming_friend_requests, ids[i])
		m.removedincoming_friend_requests[ids[i]] = struct{}{}
	}
}

// RemovedIncomingFriendRequests returns the removed IDs of the "incoming_friend_requests" edge to the FriendRequest entity.
func (m *UserMutation) RemovedIncomingFriendRequestsIDs() (ids []int) {
	for id := range m.removedincoming_friend_requests {
		ids = append(ids, id)
	}
	return
}

// IncomingFriendRequestsIDs returns the "incoming_friend_requests" edge IDs in the mutation.
func (m *UserMutation) IncomingFriendRequestsIDs() (ids []int) {
	for id := range m.incoming_friend_requests {
		ids = append(ids, id)
	}
	return
}

// ResetIncomingFriendRequests resets all changes to the "incoming_friend_requests" edge.
func (m *UserMutation) ResetIncomingFriendRequests() {
	m.incoming_friend_requests = nil
	m.clearedincoming_friend_requests = false
	m.removedincoming_friend_requests = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.friends != nil {
		edges = append(edges, user.EdgeFriends)
	}
	if m.outgoing_friend_requests != nil {
		edges = append(edges, user.EdgeOutgoingFriendRequests)
	}
	if m.incoming_friend_requests != nil {
		edges = append(edges, user.EdgeIncomingFriendRequests)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeFriends:
		ids := make([]ent.Value, 0, len(m.friends))
		for id := range m.friends {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeOutgoingFriendRequests:
		ids := make([]ent.Value, 0, len(m.outgoing_friend_requests))
		for id := range m.outgoing_friend_requests {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeIncomingFriendRequests:
		ids := make([]ent.Value, 0, len(m.incoming_friend_requests))
		for id := range m.incoming_friend_requests {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedfriends != nil {
		edges = append(edges, user.EdgeFriends)
	}
	if m.removedoutgoing_friend_requests != nil {
		edges = append(edges, user.EdgeOutgoingFriendRequests)
	}
	if m.removedincoming_friend_requests != nil {
		edges = append(edges, user.EdgeIncomingFriendRequests)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeFriends:
		ids := make([]ent.Value, 0, len(m.removedfriends))
		for id := range m.removedfriends {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeOutgoingFriendRequests:
		ids := make([]ent.Value, 0, len(m.removedoutgoing_friend_requests))
		for id := range m.removedoutgoing_friend_requests {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeIncomingFriendRequests:
		ids := make([]ent.Value, 0, len(m.removedincoming_friend_requests))
		for id := range m.removedincoming_friend_requests {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedfriends {
		edges = append(edges, user.EdgeFriends)
	}
	if m.clearedoutgoing_friend_requests {
		edges = append(edges, user.EdgeOutgoingFriendRequests)
	}
	if m.clearedincoming_friend_requests {
		edges = append(edges, user.EdgeIncomingFriendRequests)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeFriends:
		return m.clearedfriends
	case user.EdgeOutgoingFriendRequests:
		return m.clearedoutgoing_friend_requests
	case user.EdgeIncomingFriendRequests:
		return m.clearedincoming_friend_requests
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeFriends:
		m.ResetFriends()
		return nil
	case user.EdgeOutgoingFriendRequests:
		m.ResetOutgoingFriendRequests()
		return nil
	case user.EdgeIncomingFriendRequests:
		m.ResetIncomingFriendRequests()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
