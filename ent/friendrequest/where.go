// Code generated by entc, DO NOT EDIT.

package friendrequest

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/genevieve/ent-tests/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.FriendRequest {
	return predicate.FriendRequest(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.FriendRequest {
	return predicate.FriendRequest(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.FriendRequest {
	return predicate.FriendRequest(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.FriendRequest {
	return predicate.FriendRequest(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.FriendRequest {
	return predicate.FriendRequest(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.FriendRequest {
	return predicate.FriendRequest(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.FriendRequest {
	return predicate.FriendRequest(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.FriendRequest {
	return predicate.FriendRequest(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.FriendRequest {
	return predicate.FriendRequest(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// SourceID applies equality check predicate on the "source_id" field. It's identical to SourceIDEQ.
func SourceID(v int) predicate.FriendRequest {
	return predicate.FriendRequest(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSourceID), v))
	})
}

// DestinationID applies equality check predicate on the "destination_id" field. It's identical to DestinationIDEQ.
func DestinationID(v int) predicate.FriendRequest {
	return predicate.FriendRequest(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDestinationID), v))
	})
}

// SourceIDEQ applies the EQ predicate on the "source_id" field.
func SourceIDEQ(v int) predicate.FriendRequest {
	return predicate.FriendRequest(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSourceID), v))
	})
}

// SourceIDNEQ applies the NEQ predicate on the "source_id" field.
func SourceIDNEQ(v int) predicate.FriendRequest {
	return predicate.FriendRequest(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSourceID), v))
	})
}

// SourceIDIn applies the In predicate on the "source_id" field.
func SourceIDIn(vs ...int) predicate.FriendRequest {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FriendRequest(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSourceID), v...))
	})
}

// SourceIDNotIn applies the NotIn predicate on the "source_id" field.
func SourceIDNotIn(vs ...int) predicate.FriendRequest {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FriendRequest(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSourceID), v...))
	})
}

// DestinationIDEQ applies the EQ predicate on the "destination_id" field.
func DestinationIDEQ(v int) predicate.FriendRequest {
	return predicate.FriendRequest(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDestinationID), v))
	})
}

// DestinationIDNEQ applies the NEQ predicate on the "destination_id" field.
func DestinationIDNEQ(v int) predicate.FriendRequest {
	return predicate.FriendRequest(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDestinationID), v))
	})
}

// DestinationIDIn applies the In predicate on the "destination_id" field.
func DestinationIDIn(vs ...int) predicate.FriendRequest {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FriendRequest(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDestinationID), v...))
	})
}

// DestinationIDNotIn applies the NotIn predicate on the "destination_id" field.
func DestinationIDNotIn(vs ...int) predicate.FriendRequest {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FriendRequest(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDestinationID), v...))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.FriendRequest {
	return predicate.FriendRequest(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.FriendRequest {
	return predicate.FriendRequest(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.FriendRequest {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FriendRequest(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.FriendRequest {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FriendRequest(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// HasSource applies the HasEdge predicate on the "source" edge.
func HasSource() predicate.FriendRequest {
	return predicate.FriendRequest(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SourceTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SourceTable, SourceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSourceWith applies the HasEdge predicate on the "source" edge with a given conditions (other predicates).
func HasSourceWith(preds ...predicate.User) predicate.FriendRequest {
	return predicate.FriendRequest(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SourceInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SourceTable, SourceColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDestination applies the HasEdge predicate on the "destination" edge.
func HasDestination() predicate.FriendRequest {
	return predicate.FriendRequest(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DestinationTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DestinationTable, DestinationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDestinationWith applies the HasEdge predicate on the "destination" edge with a given conditions (other predicates).
func HasDestinationWith(preds ...predicate.User) predicate.FriendRequest {
	return predicate.FriendRequest(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DestinationInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DestinationTable, DestinationColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.FriendRequest) predicate.FriendRequest {
	return predicate.FriendRequest(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.FriendRequest) predicate.FriendRequest {
	return predicate.FriendRequest(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.FriendRequest) predicate.FriendRequest {
	return predicate.FriendRequest(func(s *sql.Selector) {
		p(s.Not())
	})
}
