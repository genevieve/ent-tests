// Code generated by entc, DO NOT EDIT.

package friendrequest

import (
	"fmt"

	"entgo.io/ent"
)

const (
	// Label holds the string label denoting the friendrequest type in the database.
	Label = "friend_request"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSourceID holds the string denoting the source_id field in the database.
	FieldSourceID = "source_id"
	// FieldDestinationID holds the string denoting the destination_id field in the database.
	FieldDestinationID = "destination_id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// EdgeSource holds the string denoting the source edge name in mutations.
	EdgeSource = "source"
	// EdgeDestination holds the string denoting the destination edge name in mutations.
	EdgeDestination = "destination"
	// Table holds the table name of the friendrequest in the database.
	Table = "friend_requests"
	// SourceTable is the table that holds the source relation/edge.
	SourceTable = "friend_requests"
	// SourceInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	SourceInverseTable = "users"
	// SourceColumn is the table column denoting the source relation/edge.
	SourceColumn = "source_id"
	// DestinationTable is the table that holds the destination relation/edge.
	DestinationTable = "friend_requests"
	// DestinationInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	DestinationInverseTable = "users"
	// DestinationColumn is the table column denoting the destination relation/edge.
	DestinationColumn = "destination_id"
)

// Columns holds all SQL columns for friendrequest fields.
var Columns = []string{
	FieldID,
	FieldSourceID,
	FieldDestinationID,
	FieldStatus,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/genevieve/ent-tests/ent/runtime"
//
var (
	Hooks [1]ent.Hook
)

// Status defines the type for the "status" enum field.
type Status string

// Status values.
const (
	StatusPending  Status = "pending"
	StatusAccepted Status = "accepted"
	StatusRejected Status = "rejected"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusPending, StatusAccepted, StatusRejected:
		return nil
	default:
		return fmt.Errorf("friendrequest: invalid enum value for status field: %q", s)
	}
}
