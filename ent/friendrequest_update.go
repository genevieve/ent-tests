// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/genevieve/ent-tests/ent/friendrequest"
	"github.com/genevieve/ent-tests/ent/predicate"
	"github.com/genevieve/ent-tests/ent/user"
)

// FriendRequestUpdate is the builder for updating FriendRequest entities.
type FriendRequestUpdate struct {
	config
	hooks    []Hook
	mutation *FriendRequestMutation
}

// Where appends a list predicates to the FriendRequestUpdate builder.
func (fru *FriendRequestUpdate) Where(ps ...predicate.FriendRequest) *FriendRequestUpdate {
	fru.mutation.Where(ps...)
	return fru
}

// SetSourceID sets the "source_id" field.
func (fru *FriendRequestUpdate) SetSourceID(i int) *FriendRequestUpdate {
	fru.mutation.SetSourceID(i)
	return fru
}

// SetDestinationID sets the "destination_id" field.
func (fru *FriendRequestUpdate) SetDestinationID(i int) *FriendRequestUpdate {
	fru.mutation.SetDestinationID(i)
	return fru
}

// SetStatus sets the "status" field.
func (fru *FriendRequestUpdate) SetStatus(f friendrequest.Status) *FriendRequestUpdate {
	fru.mutation.SetStatus(f)
	return fru
}

// SetSource sets the "source" edge to the User entity.
func (fru *FriendRequestUpdate) SetSource(u *User) *FriendRequestUpdate {
	return fru.SetSourceID(u.ID)
}

// SetDestination sets the "destination" edge to the User entity.
func (fru *FriendRequestUpdate) SetDestination(u *User) *FriendRequestUpdate {
	return fru.SetDestinationID(u.ID)
}

// Mutation returns the FriendRequestMutation object of the builder.
func (fru *FriendRequestUpdate) Mutation() *FriendRequestMutation {
	return fru.mutation
}

// ClearSource clears the "source" edge to the User entity.
func (fru *FriendRequestUpdate) ClearSource() *FriendRequestUpdate {
	fru.mutation.ClearSource()
	return fru
}

// ClearDestination clears the "destination" edge to the User entity.
func (fru *FriendRequestUpdate) ClearDestination() *FriendRequestUpdate {
	fru.mutation.ClearDestination()
	return fru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fru *FriendRequestUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(fru.hooks) == 0 {
		if err = fru.check(); err != nil {
			return 0, err
		}
		affected, err = fru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FriendRequestMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fru.check(); err != nil {
				return 0, err
			}
			fru.mutation = mutation
			affected, err = fru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(fru.hooks) - 1; i >= 0; i-- {
			if fru.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (fru *FriendRequestUpdate) SaveX(ctx context.Context) int {
	affected, err := fru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fru *FriendRequestUpdate) Exec(ctx context.Context) error {
	_, err := fru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fru *FriendRequestUpdate) ExecX(ctx context.Context) {
	if err := fru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fru *FriendRequestUpdate) check() error {
	if v, ok := fru.mutation.Status(); ok {
		if err := friendrequest.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "FriendRequest.status": %w`, err)}
		}
	}
	if _, ok := fru.mutation.SourceID(); fru.mutation.SourceCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "FriendRequest.source"`)
	}
	if _, ok := fru.mutation.DestinationID(); fru.mutation.DestinationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "FriendRequest.destination"`)
	}
	return nil
}

func (fru *FriendRequestUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   friendrequest.Table,
			Columns: friendrequest.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: friendrequest.FieldID,
			},
		},
	}
	if ps := fru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fru.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: friendrequest.FieldStatus,
		})
	}
	if fru.mutation.SourceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   friendrequest.SourceTable,
			Columns: []string{friendrequest.SourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fru.mutation.SourceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   friendrequest.SourceTable,
			Columns: []string{friendrequest.SourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fru.mutation.DestinationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   friendrequest.DestinationTable,
			Columns: []string{friendrequest.DestinationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fru.mutation.DestinationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   friendrequest.DestinationTable,
			Columns: []string{friendrequest.DestinationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{friendrequest.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// FriendRequestUpdateOne is the builder for updating a single FriendRequest entity.
type FriendRequestUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FriendRequestMutation
}

// SetSourceID sets the "source_id" field.
func (fruo *FriendRequestUpdateOne) SetSourceID(i int) *FriendRequestUpdateOne {
	fruo.mutation.SetSourceID(i)
	return fruo
}

// SetDestinationID sets the "destination_id" field.
func (fruo *FriendRequestUpdateOne) SetDestinationID(i int) *FriendRequestUpdateOne {
	fruo.mutation.SetDestinationID(i)
	return fruo
}

// SetStatus sets the "status" field.
func (fruo *FriendRequestUpdateOne) SetStatus(f friendrequest.Status) *FriendRequestUpdateOne {
	fruo.mutation.SetStatus(f)
	return fruo
}

// SetSource sets the "source" edge to the User entity.
func (fruo *FriendRequestUpdateOne) SetSource(u *User) *FriendRequestUpdateOne {
	return fruo.SetSourceID(u.ID)
}

// SetDestination sets the "destination" edge to the User entity.
func (fruo *FriendRequestUpdateOne) SetDestination(u *User) *FriendRequestUpdateOne {
	return fruo.SetDestinationID(u.ID)
}

// Mutation returns the FriendRequestMutation object of the builder.
func (fruo *FriendRequestUpdateOne) Mutation() *FriendRequestMutation {
	return fruo.mutation
}

// ClearSource clears the "source" edge to the User entity.
func (fruo *FriendRequestUpdateOne) ClearSource() *FriendRequestUpdateOne {
	fruo.mutation.ClearSource()
	return fruo
}

// ClearDestination clears the "destination" edge to the User entity.
func (fruo *FriendRequestUpdateOne) ClearDestination() *FriendRequestUpdateOne {
	fruo.mutation.ClearDestination()
	return fruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fruo *FriendRequestUpdateOne) Select(field string, fields ...string) *FriendRequestUpdateOne {
	fruo.fields = append([]string{field}, fields...)
	return fruo
}

// Save executes the query and returns the updated FriendRequest entity.
func (fruo *FriendRequestUpdateOne) Save(ctx context.Context) (*FriendRequest, error) {
	var (
		err  error
		node *FriendRequest
	)
	if len(fruo.hooks) == 0 {
		if err = fruo.check(); err != nil {
			return nil, err
		}
		node, err = fruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FriendRequestMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fruo.check(); err != nil {
				return nil, err
			}
			fruo.mutation = mutation
			node, err = fruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(fruo.hooks) - 1; i >= 0; i-- {
			if fruo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (fruo *FriendRequestUpdateOne) SaveX(ctx context.Context) *FriendRequest {
	node, err := fruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fruo *FriendRequestUpdateOne) Exec(ctx context.Context) error {
	_, err := fruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fruo *FriendRequestUpdateOne) ExecX(ctx context.Context) {
	if err := fruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fruo *FriendRequestUpdateOne) check() error {
	if v, ok := fruo.mutation.Status(); ok {
		if err := friendrequest.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "FriendRequest.status": %w`, err)}
		}
	}
	if _, ok := fruo.mutation.SourceID(); fruo.mutation.SourceCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "FriendRequest.source"`)
	}
	if _, ok := fruo.mutation.DestinationID(); fruo.mutation.DestinationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "FriendRequest.destination"`)
	}
	return nil
}

func (fruo *FriendRequestUpdateOne) sqlSave(ctx context.Context) (_node *FriendRequest, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   friendrequest.Table,
			Columns: friendrequest.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: friendrequest.FieldID,
			},
		},
	}
	id, ok := fruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "FriendRequest.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, friendrequest.FieldID)
		for _, f := range fields {
			if !friendrequest.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != friendrequest.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fruo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: friendrequest.FieldStatus,
		})
	}
	if fruo.mutation.SourceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   friendrequest.SourceTable,
			Columns: []string{friendrequest.SourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fruo.mutation.SourceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   friendrequest.SourceTable,
			Columns: []string{friendrequest.SourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fruo.mutation.DestinationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   friendrequest.DestinationTable,
			Columns: []string{friendrequest.DestinationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fruo.mutation.DestinationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   friendrequest.DestinationTable,
			Columns: []string{friendrequest.DestinationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &FriendRequest{config: fruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{friendrequest.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
