// Code generated by entc, DO NOT EDIT.

package user

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// EdgeFriends holds the string denoting the friends edge name in mutations.
	EdgeFriends = "friends"
	// EdgeOutgoingFriendRequests holds the string denoting the outgoing_friend_requests edge name in mutations.
	EdgeOutgoingFriendRequests = "outgoing_friend_requests"
	// EdgeIncomingFriendRequests holds the string denoting the incoming_friend_requests edge name in mutations.
	EdgeIncomingFriendRequests = "incoming_friend_requests"
	// Table holds the table name of the user in the database.
	Table = "users"
	// FriendsTable is the table that holds the friends relation/edge. The primary key declared below.
	FriendsTable = "user_friends"
	// OutgoingFriendRequestsTable is the table that holds the outgoing_friend_requests relation/edge.
	OutgoingFriendRequestsTable = "friend_requests"
	// OutgoingFriendRequestsInverseTable is the table name for the FriendRequest entity.
	// It exists in this package in order to avoid circular dependency with the "friendrequest" package.
	OutgoingFriendRequestsInverseTable = "friend_requests"
	// OutgoingFriendRequestsColumn is the table column denoting the outgoing_friend_requests relation/edge.
	OutgoingFriendRequestsColumn = "source_id"
	// IncomingFriendRequestsTable is the table that holds the incoming_friend_requests relation/edge.
	IncomingFriendRequestsTable = "friend_requests"
	// IncomingFriendRequestsInverseTable is the table name for the FriendRequest entity.
	// It exists in this package in order to avoid circular dependency with the "friendrequest" package.
	IncomingFriendRequestsInverseTable = "friend_requests"
	// IncomingFriendRequestsColumn is the table column denoting the incoming_friend_requests relation/edge.
	IncomingFriendRequestsColumn = "destination_id"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldName,
}

var (
	// FriendsPrimaryKey and FriendsColumn2 are the table columns denoting the
	// primary key for the friends relation (M2M).
	FriendsPrimaryKey = []string{"user_id", "friend_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}
